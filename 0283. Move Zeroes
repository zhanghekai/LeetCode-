Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

Example:
  Input: [0,1,0,3,12]
  Output: [1,3,12,0,0]

Note:
  You must do this in-place without making a copy of the array.
  Minimize the total number of operations.
说明:
  必须在原数组上操作，不能拷贝额外的数组。
  尽量减少操作次数。
  
========================================================================================================================================

********使用 del 方法********

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        
        # 思路：
        #   避免索引越界，提前获取列表长度
        #   如果数值为0，则删除；否则到下一位置
        
        n = len(nums)
        k = 0
        
        for i in range(n):
            if nums[k] == 0:
                del nums[k]
                nums.append(0)
            else:
                k += 1
                
********使用 pop 方法********

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        
        # 思路：
        #   避免索引越界，提前获取列表长度
        #   如果数值为０，则弹出；否则到下一位置
        
        i = 0
        n = len(nums)
        while i < n:
            if nums[i] == 0:
                nums.append(nums.pop(i))
                n -= 1
            else:
                i += 1
