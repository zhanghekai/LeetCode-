Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。

Note:
  The number of elements initialized in nums1 and nums2 are m and n respectively.
  You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.

说明:
  初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
  你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
  
Example:
  Input:
  nums1 = [1,2,3,0,0,0], m = 3
  nums2 = [2,5,6],       n = 3
  Output: [1,2,2,3,5,6]
  
=======================================================================================================================================

********未使用 m 和 n********

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        不要写return，它自己会返回nums1的
        """
        
        # nums1和nums2均为有序数组
        # nums1的大小为m+n，其中m为nums1中元素数量，n为nums2中元素数量，即：nums1中有n个0
        # 将nums2替换掉nums1中的0，再排序即可
        
        # 为了防止nums1中原本存在0，所以采用倒序插入。
        
        k = 1
        for i in nums2:
            nums1[-k] = i
            k += 1
        
        nums1.sort()
       
======================================================================================================================================

********使用 m 和 n ********

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        
        # nums1和nums2均为有序数组
        # nums1的大小为m+n，其中m为nums1中元素数量，n为nums2中元素数量，即：nums1中有n个0
        # 将nums2替换掉nums1中的0，再排序即可
        
        for i in range(n):
            nums1[m] = nums2[i]
            m += 1
            
        nums1.sort()
