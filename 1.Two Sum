'''
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

Example:
  Given nums = [2, 7, 11, 15], target = 9,
  Because nums[0] + nums[1] = 2 + 7 = 9,
  return [0, 1].
'''

=========================================================================================================================================

***********暴力法*************

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        # nums是列表，里面的数值是整数，target目标是一个整数
        # 最后返回的结果是列表，里面的值是整数，包含的是索引值
        
        # 暴力法：从第一个数开始依次与后面的数相加，若结果等于目标值，则返回两数索引
        n = len(nums)# 获取给定数组的长度
        for i in range(0, n-1):# 最后的可能性是倒数第二个数与最后一个数相加
            l = i + 1 # l中记录的是当前值后一位数的索引
            while(l < n): # 使索引值为i的数依次与后面的数进行运算
                if nums[i] + nums[l] == target:
                    return [i,l] # 程序运行到所遇到的第一个return即返回（退出def块），不会再运行后面的程序
                l += 1
                
复杂度分析：
     时间复杂度O(n^2),对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n)的时间，因此时间复杂度为O(n^2).
     空间复杂度O(1).
     
     
=========================================================================================================================================

***********两遍哈希表*************
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        
        # 为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。
        # 保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。
        # 通过以空间换取速度的方式，我们可以将查找时间从O(n) 降低到O(1)。哈希表正是为此目的而构建的，它支持以近似
        # 恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到O(n)。但只要你仔细地挑
        # 选哈希函数，在哈希表中进行查找的用时应当被摊销为O(1)。
        
        # Python中的字典便应用了哈希表的原理，能使关键字和值一一对应。
        dict_n = dict() # 构建字典
        l = len(nums) 
        for i in range(0, l):
            dict_n[nums[i]] = i # 将nums数组中的值作为key，索引作为value
        
        for i in range(0, l):
            temp = target - nums[i] # 两数之和为target的公式
            # 在python中是没有&&及||这两个运算符的，取而代之的是英文and和or
            if (dict_n.__contains__(temp) and dict_n.get(temp) != i): # 避免重复利用数组中同样的元素
                return([i, dict_n.get(temp)])
         
复杂度分析：
  时间复杂度：O(n)， 我们把包含有 n 个元素的列表遍历两次。由于哈希表将查找时间缩短到O(1) ，所以时间复杂度为O(n)。
  空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 n 个元素。
  
=====================================================================================================================================

***********一遍哈希表*************
