'''
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

Example:
  Given nums = [2, 7, 11, 15], target = 9,
  Because nums[0] + nums[1] = 2 + 7 = 9,
  return [0, 1].
'''

=========================================================================================================================================

***********暴力法*************

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        # nums是列表，里面的数值是整数，target目标是一个整数
        # 最后返回的结果是列表，里面的值是整数，包含的是索引值
        
        # 暴力法：从第一个数开始依次与后面的数相加，若结果等于目标值，则返回两数索引
        n = len(nums)# 获取给定数组的长度
        for i in range(0, n-1):# 最后的可能性是倒数第二个数与最后一个数相加
            l = i + 1 # l中记录的是当前值后一位数的索引
            while(l < n): # 使索引值为i的数依次与后面的数进行运算
                if nums[i] + nums[l] == target:
                    return [i,l] # 程序运行到所遇到的第一个return即返回（退出def块），不会再运行后面的程序
                l += 1
                
=========================================================================================================================================
