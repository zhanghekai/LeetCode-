Given a non-empty array of integers, every element appears twice except for one. Find that single one.
Note:Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

Example 1:
  Input: [2,2,1]
  Output: 1
  
Example 2:
  Input: [4,1,2,1,2]
  Output: 4

=======================================================================================================================================

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        # 异或法求解可用来找到无重复数字：
            #1.任何数和0异或为任何数：0 ^ n => n
            #2.相同的数异或为0：n ^ n => 0
            #3.满足交换律a ^ b ^ c <=> a ^ c ^ b
            
        result = 0
        for i in range(len(nums)):
            result = result ^ nums[i]
            
        return result
        
        
        '''
        # 使用python自带的内置函数遍历计数，会超出leetcode的时间限制
        for i in range(len(nums)):
            if nums.count(nums[i]) == 1:
                return nums[i]
        '''
