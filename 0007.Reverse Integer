# Given a 32-bit signed integer, reverse digits of an integer.
# Assume we are dealing with an environment which could only store integers within the 32-bit signed 
# integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 
# when the reversed integer overflows.
# 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
# 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2＾31,  2＾31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。

Example 1:　　　　　　　　　　　　　　Example 2:　　　　　　　　　　　　　　Example 3:
  Input: 123　　　　　　　　　　　　　　Input: -123　　　　　　　　　　　     Input: 120
  Output: 321　　　　　　　　　　　　   Output: -321　　　　　　　　　　　　　Output: 21

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
  
class Solution:
    def reverse(self, x: int) -> int:
        # 1.输入0，则返回0
        # 2.输入负数，则保留负号将数值反转
        # 3.反转后0开头，则将0取消只保留反转后的非0数值
        # 4.反转后的数值若超过范围则返回0
        
        list_x = list(str(abs(x))) # 将x转换为列表的形式，为了便于用list.reverse函数，对x取绝对值
        list_x.reverse() # 将列表反转
        
        if x < 0: # 判断x是否为负数
            list_x.insert(0,'-') # 加入负号
            
        r = int(''.join(list_x)) # 将列表内的元素连接起来并转换为int形式
                                 # 转换为int时自动去掉数值开头的0，不用特意进行处理
            
        if (r < -2**31) or (r > 2**31 - 1): # 判断反转后的数值是否越界，越界则返回0
            return 0
        else:
            return r

  
  
  

  
  
