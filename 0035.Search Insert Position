Given a sorted array and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。

Example 1:
  Input: [1,3,5,6], 5
  Output: 2
  
Example 2:
  Input: [1,3,5,6], 2
  Output: 1
  
Example 3:
  Input: [1,3,5,6], 7
  Output: 4
  
Example 4:
  Input: [1,3,5,6], 0
  Output: 0
  
=======================================================================================================================================

class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        # nums为排好序的数组
        # 数组中无重复元素
        
        if nums[-1] < target: # 首先判断数组中最后一位是否小于target，若是，则整个数组中的值都小于target
            return len(nums)  # 直接在最后一位插入
        
        for i in range(len(nums)): # 依次比较数组中每个值与target的大小
            if nums[i] >= target: # 若nums[i]大于target，则在当前位置插入
                return i
