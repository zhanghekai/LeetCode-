Write a function that takes an unsigned integer and return the number of '1' bits it has (also known as the Hamming weight).
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。

Example 1:
  Input: 00000000000000000000000000001011
  Output: 3
  Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
  
Example 2:
  Input: 00000000000000000000000010000000
  Output: 1
  Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
  
Example 3:
  Input: 11111111111111111111111111111101
  Output: 31
  Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
  
=========================================================================================================================================

class Solution(object):
    def hammingWeight(self, n):
        """
        :type n: int
        :rtype: int
        """
        b = bin(n) # 先将n转换为二进制字符串形式
        
        count = 0 # 记录出现‘1’的个数
        for i in range(len(b)): # 遍历二进制字符串b
            if b[i] == '1': # 如果出现‘1’，则令计数器加一
                count += 1
        return count
